import streamlit as st
import openai as ai
import numpy as np
import pandas as pd
# import aspose.words as aw
from htmldocx import HtmlToDocx
from bing_image_downloader import downloader
import os
from PIL import Image
import base64
import os
import json
import pickle
import uuid
import re
import shutil

# Add sidebar stuff and on_submit button stuff.

# Config
MODEL = 'text-davinci-003'
ai.api_key = st.secrets["openai_api_key"]

# Helper function to call GPT
def generate_response(MODEL, PROMPT, MAX_TOKENS=750, TEMP=0.99, TOP_P=0.5, N=1, FREQ_PEN=0.3, PRES_PEN = 0.9):
  response = ai.Completion.create(
          engine = MODEL,
          # engine="text-davinci-002", # OpenAI has made four text completion engines available, named davinci, ada, babbage and curie. We are using davinci, which is the most capable of the four.
          prompt=PROMPT, # The text file we use as input (step 3)
          max_tokens=MAX_TOKENS, # how many maximum characters the text will consists of.
          temperature=TEMP,
          # temperature=int(temperature), # a number between 0 and 1 that determines how many creative risks the engine takes when generating text.,
          top_p=TOP_P, # an alternative way to control the originality and creativity of the generated text.
          n=N, # number of predictions to generate
          frequency_penalty=FREQ_PEN, # a number between 0 and 1. The higher this value the model will make a bigger effort in not repeating itself.
          presence_penalty=PRES_PEN # a number between 0 and 1. The higher this value the model will make a bigger effort in talking about new topics.
      )
  return response['choices'][0]['text']

### TOP OF PAGE ###
st.title("Automatic Worksheet Generator üéà (Beta)")
st.markdown("## By Pedagogical üß†")
st.sidebar.markdown("# AI Worksheet Generator üéà")
st.sidebar.markdown("This worksheet generator was created using GPT-3. Please use it carefully and check any output before using it with learners.")
st.sidebar.markdown("For feedback please [complete this form](https://forms.gle/RpgWtdKJonN75Ga18), email philipfvbell@gmail.com or tweet @philipfvbell")
### Content ### - Either User-generated or from OpenAI. Alternative is to get it from Wikipedia.
title = st.text_input('Title')

st.markdown("### Content")
# content = st.text_input('Add the text you want your students to learn here')
# st.markdown(" OR ")
content_prompt = st.text_input('Add a topic to autogenerate reading text: e.g. "The Causes of The Korean War"')
content_length = st.slider('Number of Words for text', 0, 400)
reading_age = st.slider('Reading Age', 0, 18)

st.markdown("### Worksheet Configuration")
q_type = st.radio('Questioning Type', ['Questions', 'Questions & Answers']) #, 'Cloze Exercise', 'Image tester'
st.checkbox('Cloze Exercise')
st.checkbox('Image tester')

# if content and content_prompt:
#   st.error('You need to choose between providing your own content or autogenerated content')
worksheet_button = st.button('Generate Worksheet')
if worksheet_button:
  ### Worksheet Options ###

  with st.spinner(text='Your worksheet is in the oven üß†'):

    # st.markdown(f"# {title} ‚úç")

    content_prompt = (f'Write {str(content_length)} words about ' + content_prompt + ' for a ' + str(reading_age) + ' year old.')
    content = generate_response(MODEL, content_prompt)
    
    if q_type == 'Questions':
        q_prompt = (f'write 5 questions about the following text: {content}')
    elif q_type == 'Questions & Answers':
        q_prompt = (f'write 5 questions and answers about the following text: {content}')
    q_and_or_a = generate_response(MODEL, q_prompt, MAX_TOKENS=250)

    st.text(content)

    st.text(q_and_or_a)

    query_string = title
    downloader.download(query_string, limit=1,  output_dir='images', adult_filter_off=False, force_replace=False, timeout=60, verbose=True)
    # More options here: https://pypi.org/project/bing-image-downloader/

    ### Select word or PDF ###
    f = open('worksheet.html','w')

    # folder path
    dir_path = f'images/{query_string}'

    # list to store files
    res = []

    # Iterate directory
    for path in os.listdir(dir_path):
        # check if current path is a file
        if os.path.isfile(os.path.join(dir_path, path)):
            res.append(path)
    print(res)

    image1 = Image.open(f'images/{query_string}/{res[0]}')
    image1 = image1.resize((80, 80))
    image1.save(f'images/{query_string}/{res[0]}')

    worksheet_head = f"""<html>
    <head>
    <style>
    </style>
    </head>
    <h1>{title}</h1>
    <body>
    <p>Name ......... </p>
    <img src="images/{query_string}/{res[0]}" alt="Image 1" style="float:left;width:15px;height:15px;"
    <p><b>Read this text and highlight the key words ... </b></p>
    <p>{content}</p>
    <p><b>And now answer the following questions ! </b> <br></p>
    <p>{q_and_or_a}</p>"""

    # qp = q_and_or_a#[question + '<br> ................................................. </p>' for question in q_and_or_a]
    # worksheet_questions = '<p>'.join(qp)

    worksheet_storyboard = """<p><b>Draw a picture of the text you have read below ... </b></p>
            <svg width="400" height="180">
            <rect x="50" y="20" width="300" height="150"
            style="fill:blue;stroke:pink;stroke-width:5;fill-opacity:0.1;stroke-opacity:0.9" />
            </svg>"""

    worksheet_writing_rev = """
    <p> <b> Complete the following sentences! <br></b>
    1. Write a sentence about the text above using because <br>‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶<br>
    2. Write a sentence about the text above using but <br>‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶<br>
    3. Write a sentence about the text above using so <br>‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶<br>
    </p>
    """

    worksheet_end = """</body>
    </html>"""

    
    full_worksheet = worksheet_head +  worksheet_writing_rev + worksheet_end
    ##### ADD WORKSHEET TYPES #####
    # if ls_technique == 'Knowledge':
    #     full_worksheet = worksheet_head + worksheet_questions + worksheet_storyboard + worksheet_end
    # else: 
    #     full_worksheet = worksheet_head + worksheet_questions + worksheet_writing_rev + worksheet_end

    f.write(full_worksheet)
    f.close()

    new_parser = HtmlToDocx()
    new_parser.parse_html_file("worksheet.html", "worksheet")


    file_path = 'worksheet.docx'
    with open(file_path,"rb") as f:
        base64_word = base64.b64encode(f.read()).decode('utf-8')

    with open("worksheet.docx", "rb") as word_file:
        wordbyte = word_file.read()

    # Remove directory of images
    shutil.rmtree(dir_path) 

    downloaded = st.download_button(label="Download Word Document", 
    data=wordbyte,
    file_name="worksheet_doc_test.docx",
    mime='application/octet-stream')

    
